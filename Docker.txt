pipeline {
    agent any
    environment {
        registryCredential ="ecr:us-east-1:awscreds"
        appRegistry="614314664251.dkr.ecr.us-east-1.amazonaws.com/vprofileappimg"
        VprofileRegistry="https://614314664251.dkr.ecr.us-east-1.amazonaws.com"
    }
    stages {
        stage('Fetch Code') {
            steps {
                git branch: 'docker', url:'https://github.com/devopshydclub/vprofile-project.git'
            }
        }
    stage('Test'){
        steps {
            sh 'mvn test'
        }
    }
    stage('CODE ANALYSIS WITH CHECKSTYLE') {
            steps {
                sh 'mvn checkstyle:checkstyle'
            }
            post {
                success {
                echo 'GENERATED ANALYSIS RESULT.'
                }
            }
    }
    stage('build && SonarQube analysis') {
          environment {
            scannerHome = tool 'sonar4.7'
            }
            steps {
                withSonarQubeEnv('sonar') {
                    sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                   -Dsonar.projectName=vprofile \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
              }
            }
        }
        stage("Quality Gate") {
            steps{
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        } 
        stage('Build App image') {
            steps{
                scripts{
                    dockerImage=docker.build(appRegistry +":$BUILD_NUMBER","./Docker-files/app/multistages/")

                }
            }
        }
        stage('Upload App Image') {
            steps{
                scripts{
                    docker.withRegistry(vprofileRegistry,registryCredential) {
                        dockerImage.push("$BUILD_NUMBER")
                        dockerImage.push('latest')
                    }
                }
            }
        }
    }
}


